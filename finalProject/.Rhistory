print(flights)
only_delays <- flights %>%
filter(DEP_DELAY > 0)
print(only_delays)
average_delays <- flights %>%
group_by(OP_UNIQUE_CARRIER) %>%
summarize(avg_delay = mean(DEP_DELAY, na.rm = TRUE))
average_delays <- flights %>%
group_by(airline) %>%
summarize(avg_delay = mean(DEP_DELAY, na.rm = TRUE))
average_delays
# Sorting by average delay in descending order
average_delays <- average_delays[order(-average_delays$avg_delay), ]
# Bar plot using ggplot2
ggplot(average_delays, aes(x = reorder(airline, -avg_delay), y = avg_delay)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Average Departure Delay by Airline",
x = "Airline",
y = "Average Departure Delay (minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
flights <- flights %>%
mutate(is_delayed = ifelse(DEP_DELAY > 0, "Delayed", "Not Delayed"))
# Count the frequency of delays for each airline
delay_frequency <- flights %>%
group_by(airline, is_delayed) %>%
summarize(count = n())
# Create a bar plot using ggplot
ggplot(delay_frequency, aes(x = airline, y = count, fill = is_delayed)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Delay Frequency by Airline",
x = "Airline",
y = "Frequency") +
scale_fill_manual(values = muted_palette) +
theme(axis.text.x = element_text(angle = 15))
#Calculate percentage of all flights that are delayed
x = flights %>%
filter(DEP_DELAY > 0) %>%
count()
y = count(flights)
x/y
#remove unused
flights = flights %>%
remove(TAIL_NUM, CRS_ELAPSED_TIME, CRS_DEP_M, CRS_ARR_M, Temperature, Dew.Point)
head(flights)
#remove unused
flights = flights %>%
select(-TAIL_NUM, -CRS_ELAPSED_TIME, -CRS_DEP_M, -CRS_ARR_M, -Temperature, -Dew.Point)
#remove unused
flights %>%
select(-TAIL_NUM, -CRS_ELAPSED_TIME, -CRS_DEP_M, -CRS_ARR_M, -Temperature, -Dew.Point)
#remove unused
flights %>%
select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Wind.Speed, Condition)
#remove unused
flights %>%
select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Condition)
#remove unused
flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Condition)
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
flights <- read.csv("dataset.csv")
head(flights)
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
#remove unused
flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Condition)
head(flights)
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Condition)
head(flights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
flights <- read.csv("dataset.csv")
head(flights)
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, Wind.Speed, Condition)
head(flights)
flights$date <- as.Date(paste(flights$MONTH, flights$DAY_OF_MONTH, sep = "-"), format = "%m-%d")
unique(flights$airline)
airline_mapping <- c("B6" = "JetBlue",
"DL" = "Delta",
"AA" = "American Airlines",
"AS" = "Alaska Airlines",
"MQ" = "American Eagle Airlines",
"HA" = "Hawaiian",
"OO" = "SkyWest",
"9E" = "Endeavor Air",
"YX" = "Republic Airways")
# Convert airline codes to titles
flights <- flights %>%
mutate(airline = case_when(
airline %in% names(airline_mapping) ~ airline_mapping[airline],
TRUE ~ NA_character_
))
# Print the result
print(flights)
only_delays <- flights %>%
filter(DEP_DELAY > 0)
print(only_delays)
average_delays <- flights %>%
group_by(airline) %>%
summarize(avg_delay = mean(DEP_DELAY, na.rm = TRUE))
average_delays
# Sorting by average delay in descending order
average_delays <- average_delays[order(-average_delays$avg_delay), ]
# Bar plot using ggplot2
ggplot(average_delays, aes(x = reorder(airline, -avg_delay), y = avg_delay)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Average Departure Delay by Airline",
x = "Airline",
y = "Average Departure Delay (minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
flights %>% summarize(DAY_OF_WEEK)
flights %>% table(DAY_OF_WEEK)
flights %>% describe(DAY_OF_WEEK)
flights %>% summarize_each(DAY_OF_WEEK)
flights %>% summarize(DAY_OF_WEEK)
flights %>% reframe(DAY_OF_WEEK)
table(flights$DAY_OF_WEEK)
count(flights)
#Calculate percentage of all flights that are delayed
x = flights %>%
filter(DEP_DELAY > 0) %>%
count()
y = count(flights)
x/y
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
View(df)
View(flights)
flights <- read.csv("dataset.csv")
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, DISTANCE, Wind.Speed, Condition)
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, DISTANCE, Wind.Speed, Condition)
head(flights)
unique(flights$airline)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
flights <- read.csv("dataset.csv")
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, DISTANCE, Wind.Speed, Condition)
head(flights)
unique(flights$airline)
airline_mapping <- c("B6" = "JetBlue",
"DL" = "Delta",
"AA" = "American Airlines",
"AS" = "Alaska Airlines",
"MQ" = "American Eagle Airlines",
"HA" = "Hawaiian",
"OO" = "SkyWest",
"9E" = "Endeavor Air",
"YX" = "Republic Airways")
# Convert airline codes to titles
flights <- flights %>%
mutate(airline = case_when(
airline %in% names(airline_mapping) ~ airline_mapping[airline],
TRUE ~ NA_character_
))
# Print the result
print(flights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
flights <- read.csv("dataset.csv")
#Renaming columns
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
#remove unused
flights = flights %>% select(DAY_OF_WEEK, airline, DEST, DEP_DELAY, DISTANCE, Wind.Speed, Condition)
head(flights)
unique(flights$airline)
airline_mapping <- c("B6" = "JetBlue",
"DL" = "Delta",
"AA" = "American Airlines",
"AS" = "Alaska Airlines",
"MQ" = "American Eagle Airlines",
"HA" = "Hawaiian",
"OO" = "SkyWest",
"9E" = "Endeavor Air",
"YX" = "Republic Airways")
# Convert airline codes to titles
flights <- flights %>%
mutate(airline = case_when(
airline %in% names(airline_mapping) ~ airline_mapping[airline],
TRUE ~ NA_character_
))
# Print the result
print(flights)
lookup <- data.frame(id = 1:7,
daysOfTheWeek = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'))
flights$DAY_OF_WEEK <- lookup$daysOfTheWeek[match(flights$DAY_OF_WEEK, lookup$id)]
print(flights)
only_delays <- flights %>%
filter(DEP_DELAY > 0)
print(only_delays)
average_delays <- flights %>%
group_by(airline) %>%
summarize(avg_delay = mean(DEP_DELAY, na.rm = TRUE))
average_delays
# Sorting by average delay in descending order
average_delays <- average_delays[order(-average_delays$avg_delay), ]
# Bar plot using ggplot2
ggplot(average_delays, aes(x = reorder(airline, -avg_delay), y = avg_delay)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Average Departure Delay by Airline",
x = "Airline",
y = "Average Departure Delay (minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(RColorBrewer)
muted_palette <- brewer.pal(9, "Set3")[c(3, 4)]
flights <- flights %>%
mutate(is_delayed = ifelse(DEP_DELAY > 0, "Delayed", "Not Delayed"))
# Count the frequency of delays for each airline
delay_frequency <- flights %>%
group_by(airline, is_delayed) %>%
summarize(count = n())
# Create a bar plot using ggplot
ggplot(delay_frequency, aes(x = airline, y = count, fill = is_delayed)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Delay Frequency by Airline",
x = "Airline",
y = "Frequency") +
scale_fill_manual(values = muted_palette) +
theme(axis.text.x = element_text(angle = 15))
#Calculate percentage of all flights that are delayed
x = flights %>%
filter(DEP_DELAY > 0) %>%
count()
y = count(flights)
print(x/y)
table(flights$DAY_OF_WEEK)
count(flights)
library(tidyverse)
library(ggplot2)
library(dplyr)
avg_wind_speed <- mean(flights$Wind.Speed)
ggplot(flights, aes(x = Wind.Speed)) +
geom_density(fill = "blue", alpha = 0.5) +
geom_vline(xintercept = avg_wind_speed, color = "red", linetype = "dashed") +
geom_text(aes(x = avg_wind_speed, label = paste("Average:", round(avg_wind_speed, 2))),
y = 0.01, color = "red", hjust = -0.1) +
labs(title = "Wind Speed",
x = "Wind Speed (knots)",
y = "Density") +
theme_minimal()
ggplot(flights, aes(x = Wind.Speed, y = DEP_DELAY)) +
geom_point(color = "blue") +
labs(title = "Wind Speed vs Delay Time of All Flights",
x = "Wind Speed (knots)",
y = "Delay Time (min)") +
theme_minimal()
selected_conditions <- c("Fair", "Cloudy", "Fog", "Heavy Rain", "Light Drizzle", "Wintry Mix / Windy", "Light Snow")
delay_data_filtered <- flights %>%
filter(Condition %in% selected_conditions)
ggplot(delay_data_filtered, aes(x = Condition, y = DEP_DELAY)) +
geom_bar(stat = "summary", fun = "mean", fill = "#377eb8", color = 'black') +
labs(title = "Average Delay Time by Weather Condition",
x = "Weather Condition",
y = "Average Delay Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
only_delays <- flights %>%
filter(DEP_DELAY > 0)
head(only_delays)
flights <- flights %>%
mutate(is_delayed = ifelse(DEP_DELAY > 0, "Delayed", "Not Delayed"))
# Count the frequency of delays for each airline
delay_frequency <- flights %>%
group_by(airline, is_delayed) %>%
summarize(count = n())
# Create a bar plot using ggplot
ggplot(delay_frequency, aes(x = airline, y = count, fill = is_delayed)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Delay Frequency by Airline",
x = "Airline",
y = "Frequency") +
scale_fill_manual(values = muted_palette) +
theme(axis.text.x = element_text(angle = 15))
print(delay_frequency)
View(df)
df = flights
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
flight_summary = flights %>%
group_by(airline, DEST) %>%
summarize(
avg_delay = mean(DEP_DELAY),
total_flights = count()
) %>%
arrange(airline)
flight_summary = flights %>%
group_by(airline, DEST) %>%
summarize(
avg_delay = mean(DEP_DELAY),
total_flights = n()
) %>%
arrange(airline)
flight_summary
flights = read_csv()
flights = read_csv("./flights.csv")
flights = read_csv("flights.csv")
knitr::opts_chunk$set(echo = TRUE)
flight_summary = flights %>%
group_by(airline, DEST) %>%
summarize(
avg_delay = mean(DEP_DELAY),
total_flights = n()
) %>%
arrange(airline)
flight_summary
flights = read_csv("flights.csv")
flights = read_csv("flights.csv")
flights = rename(flights, airline = OP_UNIQUE_CARRIER)
flight_summary = flights %>%
group_by(airline, DEST) %>%
summarize(
avg_delay = mean(DEP_DELAY),
total_flights = n()
) %>%
arrange(airline)
flight_summary
```{r eruptions, echo=FALSE}
library(dplyr)
flights = read.csv("flights.csv")
View(flights)
dests = unique(flights$DEST)
```{r, echo=FALSE}
inputPanel(
selectInput("destination_input", "Select Destination:", choices = dests)
)
flights = read.csv("flights.csv")
dests = unique(flights$DEST)
inputPanel(
selectInput("destination_input", "Select Destination:", choices = dests)
)
filtered
flights = read.csv("flights.csv")
dests = unique(flights$DEST)
inputPanel(
selectInput("destination_input", "Select Destination:", choices = dests)
)
flights = read_csv("flights.csv")
flight_summary = flights %>%
group_by(airline, DEST) %>%
summarize(
avg_delay = mean(DEP_DELAY),
total_flights = n()
) %>%
arrange(DEST)
```{r, echo=FALSE}
renderPlot({
ggplot(data=penguins, mapping=aes(x=bill_length_mm, y=bill_depth_mm)) + geom_point() +
xlim(30, as.numeric(input$x_adjust))
})
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rchowla17',
token='7D003D337835A425D5A388186C95BB8C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rchowla17', token='7D003D337835A425D5A388186C95BB8C', secret='QAc+rx4xb3gOu49L1gT1AF8bbjnbJ/Zj6GeL10ja')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('shinyPractice.Rmd')
ls
getwd
getwd()
dir
cd ..
setwd()
setwd('../..')
getwd()
setwd(/Spring2024)
setwd('/Spring2024')
setwd('Spring2024')
setwd('2024Spring')
setwd('DS2003')
library(rsconnect)
rsconnect::deployApp('shinyPractice.Rmd')
getwd()
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
wd()
wd
getwd()
shiny::runApp('~/Downloads')
runApp('~/Downloads')
runApp('~/Downloads')
# Load the required library
library(shiny)
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("Final Project"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Tab selection
tabsetPanel(
tabPanel("Introduction", value = "intro")
tabPanel("Question 1", value = "q1"),
runApp('ds2003project2/finalProject')
runApp('ds2003project2/finalProject')
runApp('ds2003project2/finalProject')
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
# reading in the data
df <- read.csv('cancer patient data sets.csv')
# filtering the data to only have high level lung cancer patients
high <- subset(df, Level == "High")
# i want to focus on dry cough, clubbed finger nails, and age
high_subset <- subset(high, select = c("Clubbing.of.Finger.Nails", "Age", "Dry.Cough"))
# i want the slider bar to only have the minimum and maximum ages, so i'm finding that
minimum_age <- min(high_subset$Age)
maximum_age <- max(high_subset$Age)
# plugged in basic shiny code template
# Define UI
ui <- fluidPage(
titlePanel("Analysis of High Level Lung Cancer Symptoms"),
sidebarLayout(
sidebarPanel(
sliderInput("age_range", "Choose Age Range:",
min = minimum_age, max = maximum_age, value = c(minimum_age, maximum_age), step = 1)
),
mainPanel(
plotlyOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
output$plot <- renderPlotly({
# making the data filtered based on the age range in the df using indexing
filtered <- high_subset %>%
filter(Age >= input$age_range[1], Age <= input$age_range[2])
p <- ggplot(filtered, aes(x = Age, y = Dry.Cough, color = Clubbing.of.Finger.Nails, text = paste("Age: ", Age, "<br>Dry Cough: ", Dry.Cough, "<br>Clubbing of Finger Nails: ", Clubbing.of.Finger.Nails))) +
geom_point() +
labs(title = "Dry Cough vs Age with Clubbing of Finger Nails",
x = "Age", y = "Dry Cough", color = "Clubbing of Finger Nails") +
theme_minimal()
ggplotly(p, tooltip = "text")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('ds2003project2/finalProject')
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
# reading in the data
df <- read.csv('cancer patient data sets.csv')
# filtering the data to only have high level lung cancer patients
high <- subset(df, Level == "High")
# i want to focus on dry cough, clubbed finger nails, and age
high_subset <- subset(high, select = c("Clubbing.of.Finger.Nails", "Age", "Dry.Cough"))
# i want the slider bar to only have the minimum and maximum ages, so i'm finding that
minimum_age <- min(high_subset$Age)
maximum_age <- max(high_subset$Age)
# plugged in basic shiny code template
# Define UI
ui <- fluidPage(
titlePanel("Analysis of High Level Lung Cancer Symptoms"),
sidebarLayout(
sidebarPanel(
sliderInput("age_range", "Choose Age Range:",
min = minimum_age, max = maximum_age, value = c(minimum_age, maximum_age), step = 1)
),
mainPanel(
plotlyOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
output$plot <- renderPlotly({
# making the data filtered based on the age range in the df using indexing
filtered <- high_subset %>%
filter(Age >= input$age_range[1], Age <= input$age_range[2])
p <- ggplot(filtered, aes(x = Age, y = Dry.Cough, color = Clubbing.of.Finger.Nails, text = paste("Age: ", Age, "<br>Dry Cough: ", Dry.Cough, "<br>Clubbing of Finger Nails: ", Clubbing.of.Finger.Nails))) +
geom_point() +
labs(title = "Dry Cough vs Age with Clubbing of Finger Nails",
x = "Age", y = "Dry Cough", color = "Clubbing of Finger Nails") +
theme_minimal()
ggplotly(p, tooltip = "text")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('ds2003project2/finalProject')
runApp('ds2003project2/finalProject')
runApp('ds2003project2/finalProject')
